// backend/src/index.ts
import dotenv from 'dotenv';
dotenv.config(); // Load environment variables from .env file FIRST!

import http from 'http'; // 1. ·Éì·Éê·Éï·Éê·Éõ·Éê·É¢·Éù·Éó Node.js-·Éò·É° http ·Éõ·Éù·Éì·É£·Éö·Éò
import app from './server';
import { initSocket } from './socketManager'; // 2. ·Éì·Éê·Éï·Éê·Éõ·Éê·É¢·Éù·Éó ·É©·Éï·Éî·Éú·Éò Socket Manager-·Éò·É° ·Éò·Éõ·Éû·Éù·É†·É¢·Éò

const PORT = process.env.PORT || 4000;

// --- 3. ·É®·Éî·Éï·É•·Éõ·Éú·Éê·Éó http ·É°·Éî·É†·Éï·Éî·É†·Éò Express ·Éê·Éû·Éö·Éò·Éô·Éê·É™·Éò·Éò·Éì·Éê·Éú ---
const httpServer = http.createServer(app);

// --- 4. ·Éõ·Éù·Éï·Éê·ÉÆ·Éì·Éò·Éú·Éù·Éó Socket.IO-·É° ·Éò·Éú·Éò·É™·Éò·Éê·Éö·Éò·Éñ·Éê·É™·Éò·Éê ·Éê·Éõ http ·É°·Éî·É†·Éï·Éî·É†·Éñ·Éî ---
initSocket(httpServer);

// Startup validation function for better organization
const validateEnvironment = (): void => {
  // 5. ·É®·Éî·Éï·É™·Éï·Éê·Éö·Éù·Éó ·É®·Éî·É°·Éê·Éõ·Éù·É¨·Éõ·Éî·Éë·Éî·Éö·Éò ·É™·Éï·Éö·Éê·Éì·Éî·Éë·Éò
  const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET', 'FOURSQUARE_API_KEY'];
  const missingVars: string[] = [];
  
  requiredEnvVars.forEach(varName => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });
  
  if (missingVars.length > 0) {
    console.error(`‚ùå FATAL ERROR: The following required environment variables are not set: ${missingVars.join(', ')}`);
    console.error('   Please create or check your .env file in the /backend directory.');
    process.exit(1); // ·Éí·Éê·Éï·Éê·É©·Éî·É†·Éù·Éó ·Éê·Éû·Éö·Éò·Éô·Éê·É™·Éò·Éê, ·Éó·É£ ·Éô·É†·Éò·É¢·Éò·Éô·É£·Éö·Éò ·É™·Éï·Éö·Éê·Éì·Éî·Éë·Éò ·Éê·Éô·Éö·Éò·Éê
  }
};

// 6. ·Éí·Éê·Éï·É£·É®·Éï·Éê·Éó httpServer ·Éì·Éê ·Éê·É†·Éê app.listen()
httpServer.listen(PORT, () => {
  console.log(`‚úÖ Backend server is running and listening on http://localhost:${PORT}`);

  // ·Éí·Éê·Éï·É£·É®·Éï·Éê·Éó ·Éï·Éê·Éö·Éò·Éì·Éê·É™·Éò·Éê
  validateEnvironment();
  
  // 7. ·Éí·Éê·Éú·Éï·Éê·Éê·ÉÆ·Éö·Éù·Éó ·Éö·Éù·Éí·Éî·Éë·Éò, ·É†·Éù·Éõ ·Éê·É°·Éê·ÉÆ·Éê·Éï·Éì·Éî·É° ·É†·Éî·Éê·Éö·É£·É† ·Éõ·Éì·Éí·Éù·Éõ·Éê·É†·Éî·Éù·Éë·Éê·É°
  // Optional: Log partial key for confirmation without exposing the full key
  const fsqKey = process.env.FOURSQUARE_API_KEY!; // '!' ·Éú·Éò·É®·Éú·Éê·Éï·É°, ·É†·Éù·Éõ ·Éì·Éê·É†·É¨·Éõ·É£·Éú·Éî·Éë·É£·Éö·Éî·Éë·Éò ·Éï·Éê·É†·Éó, ·É†·Éù·Éõ ·Éê·É†·É°·Éî·Éë·Éù·Éë·É° validateEnvironment-·Éò·É° ·É®·Éî·Éõ·Éì·Éî·Éí
  const keyPreview = fsqKey.length > 8 ? `${fsqKey.substring(0, 4)}...${fsqKey.substring(fsqKey.length - 4)}` : '[key too short]';
  console.log(`üîë Foursquare API Key loaded successfully (key: ${keyPreview}).`);
  
  // Additional startup info
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìã Available endpoints:`);
  console.log(`   GET  /                     - Health check`);
  console.log(`   GET  /api/local-items      - Local JSON data (for testing)`);
  console.log(`   GET  /api/external/items   - External Foursquare API data (with caching)`);
  console.log(`   POST /api/auth/register    - User Registration`);
  console.log(`   POST /api/auth/login       - User Login`);
  console.log(`   GET  /api/me/favorites     - Get User's Favorites (Auth required)`);
  console.log(`   POST /api/me/favorites     - Add a Favorite (Auth required)`);
  console.log(`   DELETE /api/me/favorites/:itemId - Remove a Favorite (Auth required)`);
  console.log(`   GET  /api/dashboard/popular-items - Get Most Popular Items`);

  if (process.env.NODE_ENV === 'development') {
    console.log(`   GET  /api/test-foursquare  - Foursquare API test endpoint (dev only)`);
  }
});